/* -*- mode:c; coding: utf-8 -*- */

/*!
  \file parse_config.h
  \brief Обработка конфигурационного файла
 */

#ifndef PARSE_CONFIG_H_INCLUDED
#define PARSE_CONFIG_H_INCLUDED

#include <stdio.h>

/*!
  Работа с конфигурационными файлами
 */

/*!
  Структура описывает считанные в память конфигурационные параметры.
  Полное описание структуры находится в parse_config.c
 */
struct ConfigFile;
typedef struct ConfigFile ConfigFile;

/*!
  Функция считывает конфигурационные параметры из конфигурационного файла в память.
  \param path Путь к конфигурационному файлу
  \param log_f Файл, в который выводятся ошибки
  \return Указатель на структуру с конфигурационными параметрами или NULL, если при чтении была диагностирована ошибка
 */
ConfigFile *config_file_parse(const char *path, FILE *log_f);

/*!
  Освободить ресурсы
  \param cfg Структура с конфигурационными параметрами
  \return NULL
 */
ConfigFile *config_file_free(ConfigFile *cfg);

/*!
  Функция возвращает значение заданного конфигурационного параметра в виде строки.
  \param cfg Структура, хранящая конфигурационные параметры
  \param name Имя конфигурационного параметра
  \return Константный указатель на значение конфигурационного параметра или NULL, если указанный конфигурационный параметр не найден
 */
const char *config_file_get(const ConfigFile *cfg, const char *name);

/*!
  Функция считывает значение заданного конфигурационного параметра в виде целого числа
  \param cfg Структура, хранящая конфигурационные параметры
  \param name Имя конфигурационного параметра
  \param p_value Указатель на переменную, в которую будет записано значение конфигурационного параметра
  \return -1, если конфигурационный параметр определен, но его значение не может быть разобрано как десятичное целое число,
  0, если конфигурационный параметр не определен
  1, если конфигурационный параметр определен, и его значение может быть разобрано как десятичное целое число
 */
int config_file_get_int(const ConfigFile *cfg, const char *name, int *p_value);

#endif

/*
 * Local variables:
 *  c-basic-offset: 4
 * End:
 */
